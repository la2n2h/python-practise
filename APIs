# Pandas is an API

# import libary
```
import pandas as pd
import matplotlib.pyplot as plt
```

# create a dictionary, this is just data.
```
dict_={'a':[11,21,31],'b':[12,22,32]}
```

# use the dataframe to communicate with the API.
```
df = pd.DataFrame(dict_)
type(df)
```
pandas.core.frame.DataFrame

# displaying the first few rows of the dataframe
```
df.head()
```
	a	b
0	11	12
1	21	22
2	31	32

#  calculate the mean and return the value
```
df.mean()
```
a    21.0
b    22.0
dtype: float64

# REST APIs
Rest APIs function by sending a request, the request is communicated via HTTP message. The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service or resource to perform. In a similar manner, API returns a response, via an HTTP message, this response is usually contained within a JSON.

In this lab, we will use the NBA API to determine how well the Golden State Warriors performed against the Toronto Raptors. We will use the API to determine the number of points the Golden State Warriors won or lost by for each game. So if the value is three, the Golden State Warriors won by three points. Similarly it the Golden State Warriors lost by two points the result will be negative two. The API will handle a lot of the details, such a Endpoints and Authentication.

# install nba_api
```
!pip install nba_api
```
Collecting nba_api
  Downloading nba_api-1.7.0-py3-none-any.whl.metadata (5.5 kB)
Requirement already satisfied: numpy<2.0.0,>=1.22.2 in c:\users\admin\anaconda3\lib\site-packages (from nba_api) (1.26.4)
Requirement already satisfied: requests<3.0.0,>=2.32.3 in c:\users\admin\anaconda3\lib\site-packages (from nba_api) (2.32.3)
Requirement already satisfied: charset-normalizer<4,>=2 in c:\users\admin\anaconda3\lib\site-packages (from requests<3.0.0,>=2.32.3->nba_api) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in c:\users\admin\anaconda3\lib\site-packages (from requests<3.0.0,>=2.32.3->nba_api) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in c:\users\admin\anaconda3\lib\site-packages (from requests<3.0.0,>=2.32.3->nba_api) (2.2.3)
Requirement already satisfied: certifi>=2017.4.17 in c:\users\admin\anaconda3\lib\site-packages (from requests<3.0.0,>=2.32.3->nba_api) (2025.1.31)
Downloading nba_api-1.7.0-py3-none-any.whl (280 kB)
Installing collected packages: nba_api
Successfully installed nba_api-1.7.0

# import teams in nba_api
```
from nba_api.stats.static import teams
```
# create function one-dict
```
def one_dict(list_dict);
  keys = list_dict[0].keys()
  out_dict = {key:[] for key in keys}
  for dict_ in list_dict:
    for key, value in dict_.items():
      out_dict[key].append(value)
  return out_dict
```

#returns a list of dictionaries.
```
nba_teams = teams.get_team()

# look at the first three elements of the list:
```
nba_teams[0:3]
```
[{'id': 1610612737,
  'full_name': 'Atlanta Hawks',
  'abbreviation': 'ATL',
  'nickname': 'Hawks',
  'city': 'Atlanta',
  'state': 'Georgia',
  'year_founded': 1949},
 {'id': 1610612738,
  'full_name': 'Boston Celtics',
  'abbreviation': 'BOS',
  'nickname': 'Celtics',
  'city': 'Boston',
  'state': 'Massachusetts',
  'year_founded': 1946},
 {'id': 1610612739,
  'full_name': 'Cleveland Cavaliers',
  'abbreviation': 'CLE',
  'nickname': 'Cavaliers',
  'city': 'Cleveland',
  'state': 'Ohio',
  'year_founded': 1970}]

# convert the dictionary to a table
```
dict_nba_team = one_dict(nba_teams)
df_teams = pd.DataFrame(dict_nba_teams)
df_teams.head()
```
id	full_name	abbreviation	nickname	city	state	year_founded
0	1610612737	Atlanta Hawks	ATL	Hawks	Atlanta	Georgia	1949
1	1610612738	Boston Celtics	BOS	Celtics	Boston	Massachusetts	1946
2	1610612739	Cleveland Cavaliers	CLE	Cavaliers	Cleveland	Ohio	1970
3	1610612740	New Orleans Pelicans	NOP	Pelicans	New Orleans	Louisiana	2002
4	1610612741	Chicago Bulls	CHI	Bulls	Chicago	Illinois	1966

# sort team name Golden State Warriors 
```
df_warriors =df_teams[df_teams['nickname']=='Warriors']
df_warriors
```
	id	full_name	abbreviation	nickname	city	state	year_founded
7	1610612744	Golden State Warriors	GSW	Warriors	Golden State	California	1946

# sort ID of warriors
```
id_warriors = df_warriors[['id']].values[0][0]
id_warriors
```
1610612744

# import leaguegamefinder from nba.com by make the API call
```
from nba_api.stats.endpoints import Leaguegamefinder
```
# HTTP request information of Warrior from League Game Finder 
```
gamefinder = Leaguegamefinder.Leaguegamefinder(team_id_nullable=id-warriors)
```
gamefinder.get_json()
```

# get information of warriors
```
games = gamefinder.get_data_frames()[0]
games.head()
```
	SEASON_ID	TEAM_ID	TEAM_ABBREVIATION	TEAM_NAME	GAME_ID	GAME_DATE	MATCHUP	WL	MIN	PTS	...	FT_PCT	OREB	DREB	REB	AST	STL	BLK	TOV	PF	PLUS_MINUS
0	22024	1610612744	GSW	Golden State Warriors	0022400805	2025-02-21	GSW @ SAC	W	241	132	...	1.000	11.0	24.0	35.0	40	13	3	12	19	24.0
1	22024	1610612744	GSW	Golden State Warriors	0022400784	2025-02-13	GSW @ HOU	W	240	105	...	0.889	9.0	33.0	42.0	26	13	6	10	18	7.0
2	22024	1610612744	GSW	Golden State Warriors	0022400782	2025-02-12	GSW @ DAL	L	239	107	...	0.833	18.0	32.0	50.0	29	9	6	15	16	-4.0
3	22024	1610612744	GSW	Golden State Warriors	0022400760	2025-02-10	GSW @ MIL	W	238	125	...	0.789	15.0	33.0	48.0	27	16	2	9	23	14.0
4	22024	1610612744	GSW	Golden State Warriors	0022400745	2025-02-08	GSW @ CHI	W	241	132	...	0.852	16.0	28.0	44.0	34	8	7	14	23	21.0
5 rows Ã— 28 columns

# create two dataframes, one for the games that the Warriors faced the raptors at home, and the second for away games.
games_home = games[games['MATCHUP'] =='GSW vs. TOR']
games_away = games[games['MATCHUP'] =='Gsw @ TOR']

# calculate the mean for the column PLUS_MINUS for the dataframes games_home and  games_away
```
games_home['PLUS_MINUS'].mean()
```
3.375
```
games_away['PLUS_MINUS'].mean()
```
-1.7588235294117647

# plot out the PLUS MINUS column for the dataframes games_home and  games_away. We see the warriors played better at home.
```
fig, ax = plt.subplots()

games_away.plot(x='GAME_DATE',y='PLUS_MINUS', ax=ax)
games_home.plot(x='GAME_DATE',y='PLUS_MINUS', ax=ax)
ax.legend(["away", "home"])
plt.show()
```


